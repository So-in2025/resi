üåê Proyecto: Centro de Resiliencia Econ√≥mica Argentina (Resi)
√öltima Revisi√≥n de Arquitectura: 9 de Septiembre de 2025

√çndice del Documento:
1. Objetivo General
2. Arquitectura T√©cnica Detallada
   2.1. Backend (FastAPI)
   2.2. Frontend (Next.js & TypeScript)
3. Flujo de Datos Cr√≠tico: Ejemplo de Chat con la IA
4. Esquema de la Base de Datos (Final)
5. Roadmap de M√≥dulos (Actuales y Futuros)
6. Historial de Actualizaciones Recientes

---

### 1. Objetivo General
Crear un espacio digital gratuito, interactivo y visual, que empodere al usuario promedio argentino a mejorar su econom√≠a, producir alimentos sostenibles, ahorrar inteligentemente y planificar la vida familiar, integrando IA pr√°ctica y personalizada, gamificaci√≥n y comunidad.

---

### 2. Arquitectura T√©cnica Detallada
La plataforma est√° construida sobre una arquitectura desacoplada con un frontend moderno y un backend modular, preparada para escalar.

#### 2.1. Backend (FastAPI)
La API est√° dise√±ada para ser robusta, escalable y f√°cil de mantener.

* **main.py: Orquestador Principal**
    * **Funci√≥n:** Inicializa FastAPI, configura middlewares (CORS), incluye los routers de los m√≥dulos y define endpoints globales como `/chat` y `/onboarding-complete`.
    * **Inteligencia Central:** Contiene el "prompt de sistema" que define la personalidad y las reglas de la IA de Resi. Re√∫ne todo el contexto del usuario (financiero, perfil, historial) antes de cada llamada a la IA.

* **database.py: Definici√≥n de la Estructura de Datos**
    * **Funci√≥n:** Define el esquema de la base de datos usando SQLAlchemy ORM. Modela todas las tablas: `User`, `Expense`, `BudgetItem`, `SavingGoal`, `ChatMessage`, y `FamilyPlan`.

* **routers/: L√≥gica de Negocio Modular**
    * **finance.py:** Maneja toda la l√≥gica financiera: presupuestos, gastos, metas y an√°lisis.
    * **family.py:** Gestiona la creaci√≥n y recuperaci√≥n de planes familiares personalizados.
    * **cultivation.py:** Contiene la l√≥gica para los planes de cultivo.

* **dependencies.py: Funciones Auxiliares**
    * **Funci√≥n:** Provee dependencias reutilizables, como la obtenci√≥n del usuario actual (`get_user_or_create`) y el an√°lisis de texto para gastos (`parse_expense_with_gemini`).

* **schemas.py: Validaci√≥n de Datos**
    * **Funci√≥n:** Define los modelos de Pydantic que aseguran que los datos que entran y salen de la API tengan la estructura correcta.

#### 2.2. Frontend (Next.js & TypeScript)
La interfaz de usuario es una Single Page Application (SPA) construida para ser r√°pida, reactiva y adaptable a cualquier dispositivo.

* **`src/app/page.tsx`:** Es el componente principal que renderiza la p√°gina de inicio y organiza todos los m√≥dulos dentro de acordeones. Gestiona el estado global de la interfaz, como qu√© m√≥dulo est√° abierto y la visibilidad del chat.

* **`src/components/`: Componentes Reutilizables**
    * **OnboardingFlow.tsx:** Gu√≠a a los nuevos usuarios a trav√©s de una serie de pasos para recolectar informaci√≥n esencial (ingresos, perfil de riesgo, metas), personalizando la experiencia desde el inicio.
    * **FamilyPlannerModule.tsx:** Componente interactivo que permite a los usuarios definir las caracter√≠sticas de su familia y recibir un plan de comidas, ahorro y ocio generado por la IA. Guarda y recupera el √∫ltimo plan generado.
    * **ChatWindow.tsx:** Interfaz del chat flotante que muestra la conversaci√≥n y permite al usuario interactuar por texto o voz (usando el hook `useResiVoice`).
    * **FinanceModule.tsx, CultivationModule.tsx, etc.:** Componentes dedicados que encapsulan la l√≥gica y la UI de cada m√≥dulo principal.

* **`src/hooks/useResiVoice.ts`:** Hook personalizado que encapsula la l√≥gica del reconocimiento de voz del navegador (`SpeechRecognition`), convirtiendo la voz del usuario en texto para ser enviado al chat.

* **`src/lib/apiClient.ts`:** Una instancia configurada de Axios que centraliza todas las llamadas a la API del backend, manejando la inyecci√≥n de la URL base desde las variables de entorno.

---

### 3. Flujo de Datos Cr√≠tico: Ejemplo de Chat con la IA

1.  **Usuario (Frontend):** El usuario escribe o dicta una pregunta en el `ChatWindow.tsx`.
2.  **Llamada a la API (Frontend):** El componente `page.tsx` llama al endpoint `POST /chat` del backend, enviando la pregunta.
3.  **Recopilaci√≥n de Contexto (Backend):** La funci√≥n `ai_chat` en `main.py`:
    a. Guarda la pregunta del usuario en la tabla `ChatMessage`.
    b. Consulta la base de datos para obtener el resumen financiero, el perfil de riesgo, las metas a largo plazo y el √∫ltimo plan familiar del usuario.
    c. Recupera los √∫ltimos 10 mensajes del historial de chat.
    d. Ensambla toda esta informaci√≥n en un contexto consolidado.
4.  **Consulta a la IA (Backend):** El contexto completo y la nueva pregunta se env√≠an al modelo de IA (Google Gemini).
5.  **Respuesta de la IA (Backend):** La IA genera una respuesta en texto plano, siguiendo las reglas de su prompt de sistema.
6.  **Guardado y Env√≠o (Backend):** El backend guarda la respuesta de la IA en la tabla `ChatMessage` y la env√≠a de vuelta al frontend.
7.  **Renderizado (Frontend):** El `ChatWindow.tsx` recibe la respuesta y la muestra como un nuevo mensaje de Resi.

---

### 4. Esquema de la Base de Datos (Final)

* **users**
    * `email` (PK, String)
    * `has_completed_onboarding` (Boolean)
    * `risk_profile` (String, Nullable)
    * `long_term_goals` (Text, Nullable)

* **expenses**
    * `id` (PK, Integer), `description` (String), `amount` (Float), `category` (String), `date` (DateTime), `user_email` (FK)

* **budget_items**
    * `id` (PK, Integer), `category` (String), `allocated_amount` (Float), `is_custom` (Boolean), `user_email` (FK)

* **saving_goals**
    * `id` (PK, Integer), `name` (String), `target_amount` (Float), `current_amount` (Float), `user_email` (FK)

* **chat_messages**
    * `id` (PK, Integer), `sender` (String), `message` (String), `timestamp` (DateTime), `user_email` (FK)

* **family_plans**
    * `id` (PK, Integer), `meal_plan_json` (Text), `budget_suggestion` (Text), `leisure_suggestion_json` (Text), `created_at` (DateTime), `user_email` (FK)

---

### 5. Roadmap de M√≥dulos

* **M√≥dulo 1: Finanzas (‚úÖ Implementado)**
* **M√≥dulo 2: Cultivo (‚úÖ Implementado)**
* **M√≥dulo 3: Planificaci√≥n Familiar (‚úÖ Implementado y Mejorado)**
* **M√≥dulo 4: Chat con IA (‚úÖ Implementado con Hiper-Personalizaci√≥n)**
* **M√≥dulo 5: Comunidad y Gamificaci√≥n (Pendiente)**
* **M√≥dulo 6: Mercado Resiliente (Pendiente)**
* **M√≥dulo 7: Educaci√≥n Financiera (Pendiente)**
* **M√≥dulo 8: Energ√≠as Renovables (Pendiente)**
* **M√≥dulo 9: Suscripci√≥n Premium (Pendiente)**

---

### 6. Historial de Actualizaciones Recientes

* **Septiembre 2025 - "Hiper-Personalizaci√≥n" (Ruta 1):**
    * Se ampli√≥ el flujo de Onboarding para incluir **Perfil de Riesgo** y **Metas a Largo Plazo**.
    * Se expandi√≥ el **Planificador Familiar** con m√°s opciones y se implement√≥ el guardado y carga de planes.
    * Se reestructur√≥ la **base de datos** para almacenar esta nueva informaci√≥n contextual.
    * Se actualiz√≥ el **cerebro de la IA (`main.py`)** para que utilice todo el contexto del usuario (finanzas, perfil, metas, plan familiar, historial de chat) antes de generar cada respuesta, logrando un nivel de personalizaci√≥n significativamente mayor.
    * Se resolvieron m√∫ltiples errores de frontend, incluyendo el **`ERR_NETWORK`** por desincronizaci√≥n de la base de datos y se corrigieron problemas de CSS en el sidebar y m√≥dulos.