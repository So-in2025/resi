üåê Proyecto: Centro de Resiliencia Econ√≥mica Argentina (Resi)
√öltima Revisi√≥n de Arquitectura: 9 de Septiembre de 2025

√çndice del Documento:

Objetivo General

Arquitectura T√©cnica Detallada

2.1. Backend (FastAPI)

2.2. Frontend (Next.js & TypeScript)

Flujo de Datos Cr√≠tico: Ejemplo de Registro de Gasto por Voz

Esquema de la Base de Datos

Roadmap de M√≥dulos (Actuales y Futuros)

Historial de Actualizaciones Recientes

1. Objetivo General
Crear un espacio digital gratuito, interactivo y visual, que empodere al usuario promedio argentino a mejorar su econom√≠a, producir alimentos sostenibles, ahorrar inteligentemente y planificar la vida familiar, integrando IA pr√°ctica, gamificaci√≥n, comunidad y sorteos mensuales. Adem√°s, contar√° con un apartado premium y una secci√≥n para atraer inversores estrat√©gicos.

2. Arquitectura T√©cnica Detallada
La plataforma est√° construida sobre una arquitectura desacoplada con un frontend moderno y un backend modular, preparada para escalar y evolucionar.

2.1. Backend (FastAPI)
La API est√° dise√±ada para ser robusta, escalable y f√°cil de mantener, separando claramente las responsabilidades.

main.py: Orquestador Principal

Funci√≥n: Es el punto de entrada de la aplicaci√≥n. Su √∫nica responsabilidad es inicializar el objeto FastAPI, configurar los middlewares (como CORS), incluir los routers de los diferentes m√≥dulos y definir los endpoints verdaderamente globales (ej. /, /chat, /transcribe).

Filosof√≠a: Mantener este archivo lo m√°s limpio y simple posible. La l√≥gica de negocio no reside aqu√≠.

database.py: Capa de Persistencia

Funci√≥n: Centraliza toda la configuraci√≥n de la base de datos (conexi√≥n con SQLAlchemy, creaci√≥n del motor). Define todos los modelos de las tablas (ej. User, Expense, SavingGoal) como clases de SQLAlchemy.

Filosof√≠a: Es la √∫nica fuente de verdad para la estructura de la base de datos. Cualquier cambio en las tablas se realiza aqu√≠.

schemas.py: Capa de Validaci√≥n de Datos

Funci√≥n: Define todos los modelos Pydantic que se usan para la validaci√≥n de datos en los endpoints. Asegura que los datos que entran a la API (requests) y los que salen (responses) tengan la forma y los tipos correctos.

Filosof√≠a: Act√∫a como un "contrato" de datos entre el frontend y el backend, previniendo errores y garantizando la consistencia.

dependencies.py: Capa de L√≥gica Compartida

Funci√≥n: Contiene funciones reutilizables que se inyectan en los endpoints a trav√©s del sistema de dependencias de FastAPI. Ejemplos clave son get_db (gestiona la sesi√≥n de la base de datos), get_user_or_create (maneja la autenticaci√≥n y creaci√≥n de usuarios) y parse_expense_with_gemini (la l√≥gica central de IA para analizar gastos).

Filosof√≠a: Evita la repetici√≥n de c√≥digo y rompe las dependencias circulares, permitiendo que tanto el main.py como los routers accedan a l√≥gica compleja sin importarse entre ellos.

routers/: M√≥dulos de Negocio

Funci√≥n: Esta carpeta contiene la l√≥gica de negocio de cada m√≥dulo de la aplicaci√≥n en archivos separados (finance.py, cultivation.py, family.py). Cada archivo define uno o m√°s APIRouter que agrupan endpoints relacionados (ej. todos los endpoints de /finance est√°n en finance.py).

Filosof√≠a: Es el coraz√≥n de la arquitectura modular. Para agregar un nuevo m√≥dulo (ej. Gamificaci√≥n), simplemente se crea un nuevo archivo en esta carpeta y se incluye en main.py, sin necesidad de modificar el c√≥digo existente.

2.2. Frontend (Next.js & TypeScript)
Construido con un enfoque en componentes reutilizables y un flujo de estado claro.

src/app/page.tsx: Orquestador de la Interfaz

Funci√≥n: Es el componente principal de la aplicaci√≥n. Gestiona el estado de la interfaz de usuario, como qu√© m√≥dulo est√° visible (qu√© acorde√≥n est√° abierto), y pasa los datos compartidos entre los m√≥dulos (ej. el gasto en supermercado del m√≥dulo financiero se pasa al m√≥dulo de cultivo).

Filosof√≠a: Act√∫a como el "cerebro" de la UI, controlando la visibilidad y la comunicaci√≥n entre los grandes componentes modulares.

src/components/: Arsenal de Componentes

M√≥dulos (FinanceModule.tsx, CultivationModule.tsx, etc.): Son componentes grandes y complejos que encapsulan toda la l√≥gica y la interfaz de una secci√≥n principal de la aplicaci√≥n.

Componentes de UI (Accordion.tsx, Modal.tsx, Sidebar.tsx): Elementos gen√©ricos y reutilizables que sirven para construir la interfaz de manera consistente en toda la aplicaci√≥n.

Filosof√≠a: M√°xima reutilizaci√≥n y separaci√≥n de responsabilidades.

src/hooks/: L√≥gica Encapsulada

Funci√≥n: Contiene hooks personalizados de React que abstraen l√≥gica compleja. El ejemplo clave es useResiVoice.ts, que encapsula toda la funcionalidad de reconocimiento de voz del navegador y la comunicaci√≥n con el endpoint de chat de la IA.

Filosof√≠a: Mantener los componentes visuales limpios, extrayendo la l√≥gica de estado compleja a estos hooks.

src/lib/apiClient.ts: Conector Unificado

Funci√≥n: Un cliente de axios preconfigurado que centraliza todas las comunicaciones con el backend. Maneja la URL base de la API y podr√≠a ser expandido para gestionar la inyecci√≥n autom√°tica de tokens de autenticaci√≥n o el manejo de errores global.

Filosof√≠a: Un √∫nico punto de contacto con la API, facilitando el mantenimiento y la depuraci√≥n.

3. Flujo de Datos Cr√≠tico: Ejemplo de Registro de Gasto por Voz
Para migrar a otra IA, es vital entender el flujo de datos. Este es el recorrido completo de una de las funciones m√°s complejas:

Activaci√≥n (Frontend): El usuario hace clic en el bot√≥n + (FloatingActionButton) en page.tsx.

Modal (Frontend): page.tsx abre el Modal.tsx, que renderiza AddExpenseForm.tsx.

Grabaci√≥n (Frontend): El usuario presiona el bot√≥n de grabar. AddExpenseForm.tsx utiliza la API nativa MediaRecorder del navegador para capturar el audio en formato .webm.

Petici√≥n (Frontend): Al detener la grabaci√≥n, AddExpenseForm.tsx empaqueta el audio en un Blob y utiliza el apiClient para enviarlo como FormData al endpoint /transcribe del backend.

Recepci√≥n (Backend): main.py recibe la petici√≥n en el endpoint /transcribe.

Transcripci√≥n (Backend): El audio .webm se procesa con pydub y se env√≠a a Google Speech-to-Text para obtener la transcripci√≥n en texto plano.

An√°lisis IA (Backend): El texto transcrito se pasa a la funci√≥n parse_expense_with_gemini en dependencies.py.

Procesamiento IA (Backend): Gemini, instruido por un prompt espec√≠fico, analiza el texto, extrae {amount, category, description} y lo devuelve en formato JSON.

Persistencia (Backend): La funci√≥n guarda el nuevo gasto en la tabla Expense de la base de datos, definida en database.py.

Respuesta (Backend): El endpoint devuelve una respuesta de √©xito con los datos del gasto procesado.

Feedback (Frontend): AddExpenseForm.tsx recibe la respuesta, muestra un toast de confirmaci√≥n y llama a la funci√≥n onExpenseAdded().

Actualizaci√≥n (Frontend): page.tsx cierra el modal y actualiza su estado para forzar una recarga de datos en el FinanceModule, mostrando el nuevo gasto al instante.

4. Esquema de la Base de Datos
La base de datos SQLAlchemy se define en database.py con las siguientes tablas principales:

users

email (Clave Primaria, String)

has_completed_onboarding (Boolean)

expenses

id (Clave Primaria, Integer)

description (String)

amount (Float)

category (String)

date (DateTime)

user_email (Clave For√°nea a users.email)

budget_items

id (Clave Primaria, Integer)

category (String)

allocated_amount (Float)

is_custom (Boolean)

user_email (Clave For√°nea a users.email)

saving_goals

id (Clave Primaria, Integer)

name (String)

target_amount (Float)

current_amount (Float)

user_email (Clave For√°nea a users.email)

5. Roadmap de M√≥dulos (Actuales y Futuros)
M√≥dulo 1: Administrador de Gastos del Hogar con IA (‚úì Completo y Estable)

M√≥dulo 2: Hidropon√≠a Inteligente + Cultivo Org√°nico con IA (‚úì Completo y Estable)

M√≥dulo 3: Planificaci√≥n Familiar con IA (‚úì Base Funcional)

M√≥dulo 4: Gamificaci√≥n y Comunidad (Pendiente)

Concepto: Transformar la gesti√≥n financiera y de resiliencia en una experiencia motivadora y social.

Funcionalidades:

Sistema de Puntos y Logros: Los usuarios ganan "Puntos de Resiliencia" (PR) por registrar gastos, cumplir metas de ahorro, cosechar alimentos o participar en desaf√≠os.

Desaf√≠os Comunitarios: Metas semanales para toda la comunidad (ej. "Ahorremos entre todos $1,000,000 esta semana").

Ranking de Resiliencia (Opcional): Tablas de clasificaci√≥n an√≥nimas por regi√≥n o pa√≠s.

Foros de Consejos: Un espacio para que los usuarios compartan consejos sobre ahorro, cultivo y vida familiar.

IA Aplicada: La IA generar√° "misiones" personalizadas (ej. "Detect√© que tu mayor gasto es en 'Delivery'. Desaf√≠o: intenta reducirlo en un 20% esta semana y gana 500 PR"). Tambi√©n podr√≠a moderar los foros y destacar las contribuciones m√°s √∫tiles.

M√≥dulo 5: Inversores y Alianzas (Pendiente)

Concepto: Una secci√≥n p√∫blica y profesional para atraer capital y socios estrat√©gicos.

Funcionalidades: P√°gina est√°tica dentro de la app (y en la web p√∫blica) que mostrar√° la misi√≥n del proyecto, el roadmap, m√©tricas de crecimiento de usuarios (agregadas y an√≥nimas), el impacto social medido y un formulario de contacto directo.

IA Aplicada: Se podr√≠a usar una IA para generar reportes de crecimiento y proyecciones de impacto de forma autom√°tica para presentar a los inversores.

M√≥dulo 6: Mercado Resi (Pendiente)

Concepto: Un marketplace P2P (peer-to-peer) para la comunidad.

Funcionalidades: Los usuarios podr√°n ofrecer excedentes de sus cosechas, semillas, plantines o herramientas de segunda mano a otros usuarios de su zona. Sistema de reputaci√≥n y chat interno para coordinar.

IA Aplicada: La IA podr√≠a sugerir precios justos de mercado basados en la oferta y la demanda local. Tambi√©n podr√≠a actuar como un mediador inicial en caso de disputas.

M√≥dulo 7: Educaci√≥n Financiera (Pendiente)

Concepto: Peque√±os cursos y p√≠ldoras de conocimiento interactivos.

Funcionalidades: Lecciones cortas sobre temas como "Salir del Veraz", "Primeros pasos para invertir en un FCI", "Entender un plazo fijo UVA", etc. Cada lecci√≥n terminar√° con un peque√±o quiz para ganar Puntos de Resiliencia.

IA Aplicada: Un chatbot de IA especializado en finanzas argentinas que pueda responder preguntas espec√≠ficas de los usuarios sobre los temas de las lecciones, actuando como un tutor personal.

M√≥dulo 8: Energ√≠as Renovables (Pendiente)

Concepto: Una calculadora y planificador para la autosuficiencia energ√©tica.

Funcionalidades: El usuario ingresa su consumo de luz (desde la factura de Edesur/Edenor) y las caracter√≠sticas de su techo (m¬≤, orientaci√≥n).

IA Aplicada: La IA calcular√° la cantidad de paneles solares necesarios, el costo estimado de la instalaci√≥n, el tiempo de amortizaci√≥n de la inversi√≥n y el ahorro mensual proyectado en la factura de luz.

M√≥dulo 9: Suscripci√≥n Premium (Pendiente)

Concepto: Ofrecer funcionalidades avanzadas por una peque√±a suscripci√≥n mensual.

Funcionalidades Premium:

An√°lisis predictivo de gastos con mayor precisi√≥n.

Integraci√≥n con cuentas bancarias para la importaci√≥n autom√°tica de gastos (si las APIs locales lo permiten).

Consultas ilimitadas con el tutor de IA de Educaci√≥n Financiera.

Participaci√≥n en sorteos exclusivos de mayor valor.

IA Aplicada: Los modelos de IA para usuarios premium tendr√≠an acceso a m√°s datos (historial m√°s largo, datos bancarios) para ofrecer insights mucho m√°s profundos y personalizados.