// En: frontend/src/hooks/useResiVoice.ts
'use client';

import { useEffect, useCallback, useState, useRef } from 'react';
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import toast from 'react-hot-toast';
import apiClient from '@/lib/apiClient';
import { useSession } from 'next-auth/react';

const consejos = [
  "Record√° registrar hasta el gasto m√°s chiquito. ¬°Esos son los que m√°s suman a fin de mes!",
  "Una vez por semana, tomate 5 minutos para chusmear tu 'Historial'. Te va a sorprender lo que pod√©s descubrir.",
  "¬øSab√≠as que pod√©s crear categor√≠as personalizadas en el Planificador? ¬°Hac√© que la app se adapte a tu vida!",
  "La p√°gina de 'An√°lisis' te muestra gr√°ficos de tus gastos. Es la mejor forma de ver a d√≥nde se fue la plata de un solo vistazo.",
  "¬øSab√≠as que la palabra 'salario' viene de la sal? En la antigua Roma, a los soldados se les pagaba con sal. ¬°Era el verdadero oro blanco!",
  "¬øSab√≠as que Los primeros banqueros de la historia fueron los Caballeros Templarios?. Usaban claves secretas para que pudieras depositar oro en un lugar y retirarlo en otro.",
  "¬øSab√≠as que El s√≠mbolo de peso, '$', viene de las monedas de reales espa√±oles?. Las dos columnas del escudo de Espa√±a con una banda que las envolv√≠a se simplific√≥ hasta hoy.",
  "¬øSab√≠as que La mayor parte del dinero del mundo no est√° impreso?, son solo n√∫meros en computadoras. Se basa en un sistema de confianza.",
  "¬øSab√≠as que El negocio de un banco es usar tu plata?. Un plazo fijo o un fondo de inversi√≥n es tu forma de participar de esa ganancia.",
  "Le√© siempre la letra chica de un pr√©stamo o tarjeta. El Costo Financiero Total o C,F,T es el n√∫mero que realmente importa.",
  "¬øSab√≠as que El inter√©s compuesto es la fuerza m√°s poderosa del universo?. A tu favor en una inversi√≥n, te hace crecer. En tu contra en una deuda, te puede ahogar.",
  "Nunca pagues el 'm√≠nimo' de la tarjeta de cr√©dito salvo una emergencia. Es la forma m√°s cara de pedir plata prestada que existe.",
  "Regla de oro en el s√∫per: compr√° m√°s en los bordes (frutas, verduras, carnes) y menos en las g√≥ndolas del medio. La comida de verdad no suele venir en cajas.",
  "¬øSab√≠as que Si la lista de ingredientes de un paquete tiene m√°s de 5 cosas o nombres que no pod√©s pronunciar, probablemente es un ultraprocesado?.",
  "¬øSab√≠as que Cocinar en casa es una doble inversi√≥n?: una en tu salud, y otra en tu bolsillo. Es un ahorro gigante a fin de mes.",
  "El pr√≥ximo paso de tu resiliencia es cultivar algo vos. Imaginate no tener que comprar m√°s lechuga. Ese es el verdadero control sobre tu comida.",
  "¬øSab√≠as que La mejor forma de ahorrar en farmacia es invirtiendo en tu salud todos los d√≠as?: buena comida, ejercicio y descanso. La prevenci√≥n es la inversi√≥n m√°s rentable.",
  "Cuando te receten algo, preguntale siempre a tu m√©dico si existe una alternativa gen√©rica. Por ley, tienen el mismo principio activo y son m√°s baratos.",
  "¬øSab√≠as que Crear un h√°bito financiero es como ir al gimnasio?. Al principio cuesta, pero despu√©s de unas semanas, ¬°los resultados te van a encantar!",
  "No te compares con los dem√°s. Tu viaje financiero es √∫nico. Cada peso que ahorr√°s es una victoria para tu futuro.",
  "Antes de una compra grande, esper√° 24 horas. Muchas veces, el impulso desaparece y te das cuenta de que no lo necesitabas tanto."
];

let shuffledConsejos: string[] = [];
let consejoIndex = 0;

const shuffleConsejos = () => {
  shuffledConsejos = [...consejos].sort(() => 0.5 - Math.random());
  consejoIndex = 0;
};

export const useResiVoice = () => {
  const { data: session } = useSession();
  const [actionToPerform, setActionToPerform] = useState<{ type: string; payload?: any } | null>(null);
  const [hasSpokenWelcome, setHasSpokenWelcome] = useState(false);
  const [speaking, setSpeaking] = useState(false);
  // ---- NUEVO ESTADO PARA "ACTIVAR" EL AUDIO ----
  const [isSpeechPrimed, setIsSpeechPrimed] = useState(false);
  
  const tipIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const speak = useCallback((text: string) => {
    if (typeof window === 'undefined' || !window.speechSynthesis) return;

    const performSpeak = () => {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      
      utterance.onstart = () => setSpeaking(true);
      utterance.onend = () => setSpeaking(false);
      utterance.onerror = (e) => {
        console.error("Error en SpeechSynthesis:", e);
        toast.error("Hubo un problema al generar la voz.");
        setSpeaking(false);
      };
      
      const voices = window.speechSynthesis.getVoices();
      if (voices.length === 0) {
        console.error("No se encontraron voces en el navegador.");
        setSpeaking(false);
        return;
      }

      const googleSpanishVoice = voices.find(v => v.lang.startsWith('es') && v.name.includes('Google'));
      const nativeSpanishVoice = voices.find(v => v.lang.startsWith('es'));
      utterance.voice = googleSpanishVoice || nativeSpanishVoice || voices[0];
      
      console.log("Voz seleccionada:", utterance.voice.name);

      utterance.lang = utterance.voice?.lang || 'es-AR';
      utterance.rate = 1.1;
      utterance.pitch = 1.2;
      window.speechSynthesis.speak(utterance);
    };

    if (window.speechSynthesis.getVoices().length === 0) {
      window.speechSynthesis.onvoiceschanged = performSpeak;
    } else {
      performSpeak();
    }
  }, []);

  const { transcript, finalTranscript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();

  const startListening = useCallback(() => {
    // ---- L√ìGICA DE "ACTIVACI√ìN" ----
    if (!isSpeechPrimed) {
      const primerUtterance = new SpeechSynthesisUtterance('');
      primerUtterance.volume = 0; // Silencioso
      window.speechSynthesis.speak(primerUtterance);
      setIsSpeechPrimed(true);
    }

    if (speaking) {
      window.speechSynthesis.cancel();
      setSpeaking(false);
    }
    if (browserSupportsSpeechRecognition) {
      if (!hasSpokenWelcome) {
        const welcomeMessage = "Hola, soy Resi. ¬øEn qu√© te puedo ayudar?";
        speak(welcomeMessage);
        setHasSpokenWelcome(true);
      }
      resetTranscript();
      SpeechRecognition.startListening({ continuous: false, language: 'es-AR' });
      toast('¬°Te escucho!', { icon: 'üé§', duration: 2000 });
    } else {
      toast.error('Tu navegador no soporta el reconocimiento de voz.');
    }
  }, [browserSupportsSpeechRecognition, hasSpokenWelcome, isSpeechPrimed, resetTranscript, speak, speaking]);

  const stopListening = () => SpeechRecognition.stopListening();

  useEffect(() => {
    const handleCommand = async (command: string) => {
      resetTranscript();
      if (!command || !session?.user?.email) return;

      const lowerCaseCommand = command.toLowerCase();

      if (lowerCaseCommand.includes("registrar") || lowerCaseCommand.includes("gast√©") || lowerCaseCommand.includes("anot√°")) {
        setActionToPerform({ type: 'OPEN_ADD_EXPENSE_MODAL_WITH_TEXT', payload: command });
        speak('Entendido. Revis√° los datos y guard√° el gasto.');
      } else {
        const toastId = toast.loading("Resi est√° pensando...");
        try {
          const response = await apiClient.post<{ response: string }>('/chat', { question: command }, {
            headers: { 'Authorization': `Bearer ${session.user.email}` }
          });
          speak(response.data.response);
          toast.dismiss(toastId);
        } catch (error) {
          console.error("Error en el chat con IA:", error);
          speak("Disculpa, tuve un problema para procesar tu pregunta.");
          toast.error("No pude procesar tu pregunta.", { id: toastId });
        }
      }
    };
    
    if (finalTranscript) {
      handleCommand(finalTranscript);
    }
  }, [finalTranscript, resetTranscript, speak, session]);

  useEffect(() => {
    shuffleConsejos();
    const startInterval = () => {
        if (tipIntervalRef.current) clearInterval(tipIntervalRef.current);
        tipIntervalRef.current = setInterval(() => {
            if (!listening && !speaking && hasSpokenWelcome) {
                if (consejoIndex >= shuffledConsejos.length) shuffleConsejos();
                speak(shuffledConsejos[consejoIndex]);
                consejoIndex++;
            }
        }, 45000);
    };
    
    if (hasSpokenWelcome) startInterval();
    
    return () => {
      if (tipIntervalRef.current) clearInterval(tipIntervalRef.current);
      window.speechSynthesis.cancel();
    };
  }, [speak, listening, speaking, hasSpokenWelcome]);

  const clearAction = () => setActionToPerform(null);

  return { 
    listening, 
    startListening, 
    stopListening, 
    browserSupportsSpeechRecognition, 
    actionToPerform,
    clearAction,
    transcript 
  };
};