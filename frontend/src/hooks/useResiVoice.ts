'use client';

import { useEffect, useCallback, useState, useRef } from 'react';
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import toast from 'react-hot-toast';

// TU LISTA COMPLETA DE CONSEJOS Y TRIVIAS (INTACTA)
const consejos = [
  "RecordÃ¡ registrar hasta el gasto mÃ¡s chiquito. Â¡Esos son los que mÃ¡s suman a fin de mes!",
  "Una vez por semana, tomate 5 minutos para chusmear tu 'Historial'. Te va a sorprender lo que podÃ©s descubrir.",
  "Â¿SabÃ­as que podÃ©s crear categorÃ­as personalizadas en el Planificador? Â¡HacÃ© que la app se adapte a tu vida!",
  "La pÃ¡gina de 'AnÃ¡lisis' te muestra grÃ¡ficos de tus gastos. Es la mejor forma de ver a dÃ³nde se fue la plata de un solo vistazo.",
  "Â¿SabÃ­as que la palabra 'salario' viene de la sal? En la antigua Roma, a los soldados se les pagaba con sal. Â¡Era el verdadero oro blanco!",
  "Â¿SabÃ­as que Los primeros banqueros de la historia fueron los Caballeros Templarios?. Usaban claves secretas para que pudieras depositar oro en un lugar y retirarlo en otro.",
  "Â¿SabÃ­as que El sÃ­mbolo de peso, '$', viene de las monedas de reales espaÃ±oles?. Las dos columnas del escudo de EspaÃ±a con una banda que las envolvÃ­a se simplificÃ³ hasta hoy.",
  "Â¿SabÃ­as que La mayor parte del dinero del mundo no estÃ¡ impreso?, son solo nÃºmeros en computadoras. Se basa en un sistema de confianza.",
  "Â¿SabÃ­as que El negocio de un banco es usar tu plata?. Un plazo fijo o un fondo de inversiÃ³n es tu forma de participar de esa ganancia.",
  "LeÃ© siempre la letra chica de un prÃ©stamo o tarjeta. El Costo Financiero Total o C,F,T es el nÃºmero que realmente importa.",
  "Â¿SabÃ­as que El interÃ©s compuesto es la fuerza mÃ¡s poderosa del universo?. A tu favor en una inversiÃ³n, te hace crecer. En tu contra en una deuda, te puede ahogar.",
  "Nunca pagues el 'mÃ­nimo' de la tarjeta de crÃ©dito salvo una emergencia. Es la forma mÃ¡s cara de pedir plata prestada que existe.",
  "Regla de oro en el sÃºper: comprÃ¡ mÃ¡s en los bordes (frutas, verduras, carnes) y menos en las gÃ³ndolas del medio. La comida de verdad no suele venir en cajas.",
  "Â¿SabÃ­as que Si la lista de ingredientes de un paquete tiene mÃ¡s de 5 cosas o nombres que no podÃ©s pronunciar, probablemente es un ultraprocesado?.",
  "Â¿SabÃ­as que Cocinar en casa es una doble inversiÃ³n?: una en tu salud, y otra en tu bolsillo. Es un ahorro gigante a fin de mes.",
  "El prÃ³ximo paso de tu resiliencia es cultivar algo vos. Imaginate no tener que comprar mÃ¡s lechuga. Ese es el verdadero control sobre tu comida.",
  "Â¿SabÃ­as que La mejor forma de ahorrar en farmacia es invirtiendo en tu salud todos los dÃ­as?: buena comida, ejercicio y descanso. La prevenciÃ³n es la inversiÃ³n mÃ¡s rentable.",
  "Cuando te receten algo, preguntale siempre a tu mÃ©dico si existe una alternativa genÃ©rica. Por ley, tienen el mismo principio activo y son mÃ¡s baratos.",
  "Â¿SabÃ­as que Crear un hÃ¡bito financiero es como ir al gimnasio?. Al principio cuesta, pero despuÃ©s de unas semanas, Â¡los resultados te van a encantar!",
  "No te compares con los demÃ¡s. Tu viaje financiero es Ãºnico. Cada peso que ahorrÃ¡s es una victoria para tu futuro.",
  "Antes de una compra grande, esperÃ¡ 24 horas. Muchas veces, el impulso desaparece y te das cuenta de que no lo necesitabas tanto."
];

let shuffledConsejos: string[] = [];
let consejoIndex = 0;

const shuffleConsejos = () => {
  const array = [...consejos];
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  shuffledConsejos = array;
  consejoIndex = 0;
};


export const useResiVoice = () => {
  const [responseToSpeak, setResponseToSpeak] = useState('');
  const [actionToPerform, setActionToPerform] = useState<{ type: string; payload?: any } | null>(null);
  const [hasSpokenWelcome, setHasSpokenWelcome] = useState(false);
  const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([]);
  const [hasShownListeningToast, setHasShownListeningToast] = useState(false);
  const [speaking, setSpeaking] = useState(false);
  
  const tipIntervalRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const getVoices = () => {
        setAvailableVoices(window.speechSynthesis.getVoices());
      };
      getVoices();
      window.speechSynthesis.onvoiceschanged = getVoices;
    }
  }, []);

  const speak = useCallback((text: string) => {
    if (typeof window === 'undefined' || !window.speechSynthesis || availableVoices.length === 0) {
      console.warn("SpeechSynthesis no estÃ¡ disponible o las voces no se han cargado aÃºn.");
      return;
    }

    window.speechSynthesis.cancel();
    const utterance = new SpeechSynthesisUtterance(text);
    
    // **CORRECCIÃ“N:** Se aÃ±aden los callbacks para el estado 'speaking'
    utterance.onstart = () => setSpeaking(true);
    utterance.onend = () => setSpeaking(false);
    utterance.onerror = () => setSpeaking(false);

    let selectedVoice = null;
    
    const googleSpanishVoices = availableVoices.filter(voice => 
      voice.lang.startsWith('es') && voice.name.includes('Google')
    );

    // Prioridad 1: Buscar una voz femenina de Google
    selectedVoice = googleSpanishVoices.find(voice => 
        voice.name.toLowerCase().includes('femenino') || voice.name.toLowerCase().includes('wavenet-f')
    );

    // Prioridad 2: Si no se encontrÃ³ una voz femenina explÃ­cita, usar la segunda voz de Google.
    if (!selectedVoice && googleSpanishVoices.length > 1) {
      selectedVoice = googleSpanishVoices[1];
    }
    
    if (!selectedVoice) {
      selectedVoice = availableVoices.find(voice => 
          voice.lang.startsWith('es') && (voice.name.toLowerCase().includes('femenino') || voice.name.toLowerCase().includes('f'))
      );
    }
    
    if (!selectedVoice) {
      selectedVoice = availableVoices.find(voice => voice.lang.startsWith('es'));
    }

    if (!selectedVoice) {
      selectedVoice = availableVoices[0];
    }
    
    if (selectedVoice) {
      utterance.voice = selectedVoice;
      utterance.lang = selectedVoice.lang;
      utterance.rate = 1.1;
      utterance.pitch = 1.2;
      window.speechSynthesis.speak(utterance);
    } else {
      console.error("No se encontrÃ³ una voz de Google en espaÃ±ol femenina ni una nativa compatible.");
    }
  }, [availableVoices]);

  const { transcript, finalTranscript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();

  const startListening = () => {
    if (browserSupportsSpeechRecognition) {
      if (!hasSpokenWelcome) {
        const welcomeMessage = "Hola, soy Resi. PresionÃ¡ el boton con el MAS y decime un gasto para registrarlo, por ejemplo: 5000 pesos en nafta.";
        speak(welcomeMessage);
        setHasSpokenWelcome(true);
      }
      resetTranscript();
      SpeechRecognition.startListening({ continuous: false, language: 'es-AR' });
      if (!hasShownListeningToast) {
       // toast('Â¡Te escucho!', { icon: 'ðŸŽ¤', duration: 2000 });
       // setHasShownListeningToast(true);
      }
    } else {
      toast.error('Tu navegador no soporta el reconocimiento de voz.');
    }
  };

  const stopListening = () => SpeechRecognition.stopListening();

  useEffect(() => {
    if (finalTranscript) {
      const command = finalTranscript.toLowerCase();
      if (command.includes("registrar") || command.includes("gasto") || command.includes("gastÃ©")) {
        setActionToPerform({ type: 'OPEN_ADD_EXPENSE_MODAL_WITH_TEXT', payload: finalTranscript });
        speak('Entendido. RevisÃ¡ los datos y guardÃ¡ el gasto.');
      }
      resetTranscript();
    }
  }, [finalTranscript, resetTranscript, speak]);

  useEffect(() => {
    if (responseToSpeak) {
      speak(responseToSpeak);
      setResponseToSpeak('');
    }
  }, [responseToSpeak, speak]);

  useEffect(() => {
    if (hasSpokenWelcome) {
      shuffleConsejos();
      if (tipIntervalRef.current) {
        clearInterval(tipIntervalRef.current);
      }
      
      tipIntervalRef.current = setInterval(() => {
        if (!listening) {
          if (consejoIndex >= shuffledConsejos.length) {
            shuffleConsejos();
          }
          speak(shuffledConsejos[consejoIndex]);
          consejoIndex++;
        }
      }, 45000);

    }

    return () => {
      if (tipIntervalRef.current) {
        clearInterval(tipIntervalRef.current);
      }
      window.speechSynthesis.cancel();
    };
  }, [speak, listening, hasSpokenWelcome]);

  const clearAction = () => setActionToPerform(null);

  return { 
    listening, 
    startListening, 
    stopListening, 
    browserSupportsSpeechRecognition, 
    actionToPerform,
    clearAction,
    transcript,
    finalTranscript,
    speaking,
    setResponseToSpeak
  };
};